{"title":{"firstSourceText":"<h2 id=\"t_58ae76e80100kj8t\" class=\"titName SG_txta\">(转载)JAVA&nbsp;内部类的使用</h2>"},"content":{"firstSourceText":"<div id=\"sina_keyword_ad_area2\" class=\"articalContent   \">\n  关键字: 内部类 java \n <div>\n  JAVA 内部类的简单总结\n  <br> 定义在一个类内部的类叫内部类，包含内部类的类称为外部类。内部类可以声明public、protected、private等访问限制，可以声 明为 abstract的供其他内部类或外部类继承与扩展，或者声明为static、final的，也可以实现特定的接口。static的内部类行为上象一个独 立的类，非static在行为上类似类的属性或方法且禁止声明static的方法。内部类可以访问外部类的所有方法与属性，但static的内部类只能访 问外部类的静态属性与方法。\n  <br> \n  <br> 外部类按常规的类访问方式使用内部类，唯一的差别是外部类可以访问内部类的所有方法与属性，\n  <span style=\"color: rgb(255, 49, 15);\">包括私有方法与属性。如：<br> \n   <div> \n    <div> \n     <div>\n      Java 代码 \n      <embed SRC=\"http://hekeji.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf\" FLASHVARS=\"clipboard=%20%20%20%20%20%20%20%20pinner%20p%20%3D%20new%20pinner()%3B%0A%20%20%20%20%20%20%20%20p.index%20%3D%2020%3B%0A%20%20%20%20%20%20%20%20p.Print()%3B%0A%20%20%20%20%20%20%20%20----%20%E8%BF%99%E7%A7%8D%E6%96%B9%E5%BC%8F%E9%80%82%E5%90%88%E5%A4%96%E9%83%A8%E7%B1%BB%E7%9A%84%E9%9D%9Estatic%E6%96%B9%E6%B3%95%EF%BC%9B%0A%0A%20%20%20%20%20%20%20%20pouter%20po%20%3D%20new%20pouter()%3B%0A%20%20%20%20%20%20%20%20pinner%20pi%20%3D%20po.new%20pinner()%3B%0A%20%20%20%20%20%20%20%20pi.index%20%3D%2040%3B%0A%20%20%20%20%20%20%20%20pi.Print()%3B%0A%20%20%20%20%20%20%20%20----%20%E8%BF%99%E7%A7%8D%E6%96%B9%E5%BC%8F%E9%80%82%E5%90%88%E5%A4%96%E9%83%A8%E7%B1%BB%E7%9A%84static%E6%96%B9%E6%B3%95%EF%BC%9B\" QUALITY=\"high\" allowScriptAccess=\"never\" allowNetworking=\"internal\" autostart=\"0\" TYPE=\"application/x-shockwave-flash\" PLUGINSPAGE=\"http://www.macromedia.com/go/getflashplayer\" HEIGHT=\"15\" WIDTH=\"14\">\n     </div> \n    </div> \n    <ol start=\"1\"> \n     <li> <span><span>pinner&nbsp;<wbr>p&nbsp;<wbr>=&nbsp;<wbr><span>new<span>&nbsp;<wbr>pinner();&nbsp;<wbr>&nbsp;<wbr></span></span></span></span></li> \n     <li><span>p.index&nbsp;<wbr>=&nbsp;<wbr><span>20<span>;&nbsp;<wbr>&nbsp;<wbr></span></span></span></li> \n     <li> <span>p.Print();&nbsp;<wbr>&nbsp;<wbr></span></li> \n     <li><span>----&nbsp;<wbr>这 种方式适合外部类的非<span>static<span>方法；&nbsp;<wbr>&nbsp;<wbr></span></span></span></li> \n     <li><span>&nbsp;<wbr>&nbsp;<wbr></span></li> \n     <li> <span>pouter&nbsp;<wbr>po&nbsp;<wbr>=&nbsp;<wbr><span>new<span>&nbsp;<wbr>pouter();&nbsp;<wbr>&nbsp;<wbr></span></span></span></li> \n     <li> <span>pinner&nbsp;<wbr>pi&nbsp;<wbr>=&nbsp;<wbr>po.<span>new<span>&nbsp;<wbr>pinner();&nbsp;<wbr>&nbsp;<wbr></span></span></span></li> \n     <li><span>pi.index&nbsp;<wbr>=&nbsp;<wbr><span>40<span>;&nbsp;<wbr>&nbsp;<wbr></span></span></span></li> \n     <li> <span>pi.Print();&nbsp;<wbr>&nbsp;<wbr></span></li> \n     <li><span>----&nbsp;<wbr>这 种方式适合外部类的<span>static<span>方法；&nbsp;<wbr>&nbsp;<wbr></span></span></span></li> \n    </ol> \n   </div> <pre style=\"display: none;\" name=\"code\">\n        pinner p = new pinner();\n        p.index = 20;\n        p.Print();\n        ---- 这种方式适合外部类的非static方法；\n\n        pouter po = new pouter();\n        pinner pi = po.new pinner();\n        pi.index = 40;\n        pi.Print();\n        ---- 这种方式适合外部类的static方法；\n</pre> <br> <br> 内部类类似外部类的属性，因此<span style=\"color: rgb(251, 31, 0);\">访问内部类对象时总是需要一个创建好的外部类对象。内部类对象通过‘外部类名.this.xxx’的形式访问外部类 的属性与方法。如：<br> \n    <div> \n     <div> \n      <div>\n       Java 代码 \n       <embed SRC=\"http://hekeji.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf\" FLASHVARS=\"clipboard=%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%22Print%20in%20inner%20Outer.index%3D%22%20%2B%20pouter.this.index)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%22Print%20in%20inner%20Inner.index%3D%22%20%2B%20this.index)%3B\" QUALITY=\"high\" allowScriptAccess=\"never\" allowNetworking=\"internal\" autostart=\"0\" TYPE=\"application/x-shockwave-flash\" PLUGINSPAGE=\"http://www.macromedia.com/go/getflashplayer\" HEIGHT=\"15\" WIDTH=\"14\">\n      </div> \n     </div> \n     <ol start=\"1\"> \n      <li><span><span>System.out.println(<span>\"Print&nbsp;<wbr>in&nbsp;<wbr>inner&nbsp;<wbr>Outer.index=\"<span>&nbsp;<wbr>+&nbsp;<wbr>pouter.<span>this<span>.index);&nbsp;<wbr>&nbsp;<wbr></span></span></span></span></span></span></li> \n      <li><span>System.out.println(<span>\"Print&nbsp;<wbr>in&nbsp;<wbr>inner&nbsp;<wbr>Inner.index=\"<span>&nbsp;<wbr>+&nbsp;<wbr><span>this<span>.index);&nbsp;<wbr>&nbsp;<wbr></span></span></span></span></span></li> \n     </ol> \n    </div> <pre style=\"display: none;\" name=\"code\">\n            System.out.println(\"Print in inner Outer.index=\" + pouter.this.index);\n            System.out.println(\"Print in inner Inner.index=\" + this.index);\n</pre> <br> <br> 如果需要在其他类中访问内部类，可以使用：<br> (1)外部类提供创建内部类的方法供其他类使用。如：<br> &nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr> // 外部类<br> &nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr> pinner getInner()<br> &nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr> {<br> &nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr> return new pinner();<br> &nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr> }<br> <br> &nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr> // 其他类<br> &nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr> pouter.pinner pi = po.getInner();<br> &nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr> pi.Print();<br> <br> (2)直接创建内部类的对象。如：<br> &nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr> pouter po = new pouter();<br> &nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr> pouter.pinner pi = <span style=\"color: rgb(255, 8, 8);\">po.new pinner();<br> &nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr> pi.Print();<br> <br> 内部类可以声明在外部类的方法中或语句块中。如果内部类需要访问包含它的外部类方法或语句块的局部变量或参数，则该局部变量或参数必须是 final的。外部类的其他方法、其他类无法访问声明在方法内部或块内部的内部类。<br> <br> 如果一个类继承内部类，则创建该类的对象时需提供一个外部类的对象作为构造方法的参数。如：<br> \n     <div> \n      <div> \n       <div>\n        Java 代码 \n        <embed SRC=\"http://hekeji.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf\" FLASHVARS=\"clipboard=class%20Car%0A%7B%0A%20%20%20%20class%20Wheel%0A%20%20%20%20%7B%0A%0A%20%20%20%20%7D%0A%7D%0A%0Aclass%20SuperWheel%20extends%20Car.Wheel%0A%7B%0A%20%20%20%20SuperWheel(Car%20car)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20car.super()%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20public%20static%20void%20main(String%20%5B%5D%20args)%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20Car%20car%20%3D%20new%20Car()%3B%0A%20%20%20%20%20%20%20%20SuperWheel%20wl%20%3D%20new%20SuperWheel(car)%3B%0A%20%20%20%20%7D%0A%7D\" QUALITY=\"high\" allowScriptAccess=\"never\" allowNetworking=\"internal\" autostart=\"0\" TYPE=\"application/x-shockwave-flash\" PLUGINSPAGE=\"http://www.macromedia.com/go/getflashplayer\" HEIGHT=\"15\" WIDTH=\"14\">\n       </div> \n      </div> \n      <ol start=\"1\"> \n       <li><span><span>class<span>&nbsp;<wbr>Car&nbsp;<wbr>&nbsp;<wbr></span></span></span></li> \n       <li><span>{&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr><span>class<span>&nbsp;<wbr>Wheel&nbsp;<wbr>&nbsp;<wbr></span></span></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>{&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li><span>&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>}&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li><span>}&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li><span>&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li><span><span>class<span>&nbsp;<wbr>SuperWheel&nbsp;<wbr><span>extends<span>&nbsp;<wbr>Car.Wheel&nbsp;<wbr>&nbsp;<wbr></span></span></span></span></span></li> \n       <li><span>{&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>SuperWheel(Car&nbsp;<wbr>car)&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>{&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>car.<span>super<span>();&nbsp;<wbr>&nbsp;<wbr></span></span></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>}&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li><span>&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr><span>public<span>&nbsp;<wbr><span>static<span>&nbsp;<wbr><span>void<span>&nbsp;<wbr>main(String&nbsp;<wbr>[]&nbsp;<wbr>args)&nbsp;<wbr>&nbsp;<wbr></span></span></span></span></span></span></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>{&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>Car&nbsp;<wbr>car&nbsp;<wbr>=&nbsp;<wbr><span>new<span>&nbsp;<wbr>Car();&nbsp;<wbr>&nbsp;<wbr></span></span></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>SuperWheel&nbsp;<wbr>wl&nbsp;<wbr>=&nbsp;<wbr><span>new<span>&nbsp;<wbr>SuperWheel(car);&nbsp;<wbr>&nbsp;<wbr></span></span></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>}&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li><span>}&nbsp;<wbr>&nbsp;<wbr></span></li> \n      </ol> \n     </div> <pre style=\"display: none;\" name=\"code\">\nclass Car\n{\n    class Wheel\n    {\n\n    }\n}\n\nclass SuperWheel extends Car.Wheel\n{\n    SuperWheel(Car car)\n    {\n        car.super();\n    }\n\n    public static void main(String [] args)\n    {\n        Car car = new Car();\n        SuperWheel wl = new SuperWheel(car);\n    }\n}\n</pre> <br> <br> 如果创建命名的内部类没有多少实际意义时，可以创建匿名的内部类。比如使用内部类实现接口的功能(如事件处理器、适配器等)，而功能的差异较大， 需要根据实际的情况创建相应的内部类时，可以使用匿名内部类。简单的示例如下：<br> \n     <div> \n      <div> \n       <div>\n        Java 代码 \n        <embed SRC=\"http://hekeji.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf\" FLASHVARS=\"clipboard=interface%20WebView%0A%7B%0A%20%20%20%20void%20doGet()%3B%0A%7D%0A%0Aclass%20A%0A%7B%0A%20%20%20%20WebView%20ShowName()%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20WebView()%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20void%20doGet()%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%22Name%22)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20%20%20%20%0A%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20WebView%20ShowCode()%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20return%20new%20WebView()%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20void%20doGet()%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%22Code%22)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20%20%20%20%0A%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%0A%7D\" QUALITY=\"high\" allowScriptAccess=\"never\" allowNetworking=\"internal\" autostart=\"0\" TYPE=\"application/x-shockwave-flash\" PLUGINSPAGE=\"http://www.macromedia.com/go/getflashplayer\" HEIGHT=\"15\" WIDTH=\"14\">\n       </div> \n      </div> \n      <ol start=\"1\"> \n       <li><span><span>interface<span>&nbsp;<wbr>WebView&nbsp;<wbr>&nbsp;<wbr></span></span></span></li> \n       <li><span>{&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr><span>void<span>&nbsp;<wbr>doGet();&nbsp;<wbr>&nbsp;<wbr></span></span></span></li> \n       <li><span>}&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li><span>&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li><span><span>class<span>&nbsp;<wbr>A&nbsp;<wbr>&nbsp;<wbr></span></span></span></li> \n       <li><span>{&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>WebView&nbsp;<wbr>ShowName()&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>{&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr><span>return<span>&nbsp;<wbr><span>new<span>&nbsp;<wbr>WebView()&nbsp;<wbr>&nbsp;<wbr></span></span></span></span></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>{&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr><span>void<span>&nbsp;<wbr>doGet()&nbsp;<wbr>&nbsp;<wbr></span></span></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>{&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>System.out.println(<span>\"Name\"<span>);&nbsp;<wbr>&nbsp;<wbr></span></span></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>}&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>};&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>}&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li><span>&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>WebView&nbsp;<wbr>ShowCode()&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>{&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr><span>return<span>&nbsp;<wbr><span>new<span>&nbsp;<wbr>WebView()&nbsp;<wbr>&nbsp;<wbr></span></span></span></span></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>{&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr><span>void<span>&nbsp;<wbr>doGet()&nbsp;<wbr>&nbsp;<wbr></span></span></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>{&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>System.out.println(<span>\"Code\"<span>);&nbsp;<wbr>&nbsp;<wbr></span></span></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>}&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>};&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li> <span>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>}&nbsp;<wbr>&nbsp;<wbr></span></li> \n       <li><span>}&nbsp;<wbr>&nbsp;<wbr></span></li> \n      </ol> \n     </div> <pre style=\"display: none;\" name=\"code\">\ninterface WebView\n{\n    void doGet();\n}\n\nclass A\n{\n    WebView ShowName()\n    {\n        return new WebView()\n        {\n            void doGet()\n            {\n                System.out.println(\"Name\");\n            }    \n        };\n    }\n\n    WebView ShowCode()\n    {\n        return new WebView()\n        {\n            void doGet()\n            {\n                System.out.println(\"Code\");\n            }    \n        };\n    }\n}\n</pre> <br> <br> 最后，JAVA 内部类还有一个作用，那就是实现JAVA的多继承。JAVA本身是不允许多继承的，如果我们想一个类继承多个基类，就可以使用内部类。通过内部类分别继承 一个基类，外部类创建内部类的对象，并使用内部类的方法，变相地实现了多继承。</span></span></span>\n </div> \n</div>"},"date":{"firstSourceText":"2010-08-07 11:36:31"}}